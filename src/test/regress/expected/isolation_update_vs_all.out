Parsed test spec with 2 sessions

starting permutation: s1-begin s2-begin s1-update s2-truncate s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-update: UPDATE update_hash SET data = 'l' WHERE id = 4;
step s2-truncate: TRUNCATE update_hash; <waiting ...>
step s1-commit: COMMIT;
step s2-truncate: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           


starting permutation: s1-begin s2-begin s1-update s2-drop s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-update: UPDATE update_hash SET data = 'l' WHERE id = 4;
step s2-drop: DROP TABLE update_hash; <waiting ...>
step s1-commit: COMMIT;
step s2-drop: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
ERROR:  relation "update_hash" does not exist

starting permutation: s1-begin s2-begin s1-update s2-ddl-create-index s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-update: UPDATE update_hash SET data = 'l' WHERE id = 4;
step s2-ddl-create-index: CREATE INDEX update_hash_index ON update_hash(id); <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-create-index: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              

starting permutation: s1-ddl-create-index s1-begin s2-begin s1-update s2-ddl-drop-index s1-commit s2-commit s1-select
step s1-ddl-create-index: CREATE INDEX update_hash_index ON update_hash(id);
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-update: UPDATE update_hash SET data = 'l' WHERE id = 4;
step s2-ddl-drop-index: DROP INDEX update_hash_index; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-drop-index: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              

starting permutation: s1-begin s2-begin s1-update s2-ddl-add-column s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-update: UPDATE update_hash SET data = 'l' WHERE id = 4;
step s2-ddl-add-column: ALTER TABLE update_hash ADD new_column int DEFAULT 0; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-add-column: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           new_column     

0               a             0              
1               b             0              
2               c             0              
3               d             0              
4              l              0              

starting permutation: s1-ddl-add-column s1-begin s2-begin s1-update s2-ddl-drop-column s1-commit s2-commit s1-select
step s1-ddl-add-column: ALTER TABLE update_hash ADD new_column int DEFAULT 0;
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-update: UPDATE update_hash SET data = 'l' WHERE id = 4;
step s2-ddl-drop-column: ALTER TABLE update_hash DROP new_column; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-drop-column: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              

starting permutation: s1-begin s2-begin s1-update s2-ddl-unique-constraint s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-update: UPDATE update_hash SET data = 'l' WHERE id = 4;
step s2-ddl-unique-constraint: ALTER TABLE update_hash ADD CONSTRAINT update_hash_unique UNIQUE(id); <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-unique-constraint: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              

starting permutation: s1-begin s2-begin s1-update s2-table-size s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-update: UPDATE update_hash SET data = 'l' WHERE id = 4;
step s2-table-size: SELECT citus_table_size('update_hash'); SELECT citus_relation_size('update_hash'); SELECT citus_total_relation_size('update_hash');
citus_table_size

303104         
citus_relation_size

40960          
citus_total_relation_size

303104         
step s1-commit: COMMIT;
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              

starting permutation: s1-drop s1-create-non-distributed-table s1-begin s2-begin s1-update s2-distribute-table s1-commit s2-commit s1-select
step s1-drop: DROP TABLE update_hash;
step s1-create-non-distributed-table: CREATE TABLE update_hash(id integer, data text); COPY update_hash FROM PROGRAM 'echo 0, a\\n1, b\\n2, c\\n3, d\\n4, e' WITH CSV;
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-update: UPDATE update_hash SET data = 'l' WHERE id = 4;
step s2-distribute-table: SELECT create_distributed_table('update_hash', 'id'); <waiting ...>
step s1-commit: COMMIT;
step s2-distribute-table: <... completed>
create_distributed_table

               
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              

starting permutation: s1-begin s2-begin s1-truncate s2-update s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-truncate: TRUNCATE update_hash;
step s2-update: UPDATE update_hash SET data = 'l' WHERE id = 4; <waiting ...>
step s1-commit: COMMIT;
step s2-update: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           


starting permutation: s1-begin s2-begin s1-drop s2-update s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-drop: DROP TABLE update_hash;
step s2-update: UPDATE update_hash SET data = 'l' WHERE id = 4; <waiting ...>
step s1-commit: COMMIT;
step s2-update: <... completed>
error in steps s1-commit s2-update: ERROR:  relation "update_hash" does not exist
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
ERROR:  relation "update_hash" does not exist

starting permutation: s1-begin s2-begin s1-ddl-create-index s2-update s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-ddl-create-index: CREATE INDEX update_hash_index ON update_hash(id);
step s2-update: UPDATE update_hash SET data = 'l' WHERE id = 4; <waiting ...>
step s1-commit: COMMIT;
step s2-update: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              

starting permutation: s1-ddl-create-index s1-begin s2-begin s1-ddl-drop-index s2-update s1-commit s2-commit s1-select
step s1-ddl-create-index: CREATE INDEX update_hash_index ON update_hash(id);
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-ddl-drop-index: DROP INDEX update_hash_index;
step s2-update: UPDATE update_hash SET data = 'l' WHERE id = 4; <waiting ...>
step s1-commit: COMMIT;
step s2-update: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              

starting permutation: s1-begin s2-begin s1-ddl-add-column s2-update s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-ddl-add-column: ALTER TABLE update_hash ADD new_column int DEFAULT 0;
step s2-update: UPDATE update_hash SET data = 'l' WHERE id = 4; <waiting ...>
step s1-commit: COMMIT;
step s2-update: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           new_column     

0               a             0              
1               b             0              
2               c             0              
3               d             0              
4              l              0              

starting permutation: s1-ddl-add-column s1-begin s2-begin s1-ddl-drop-column s2-update s1-commit s2-commit s1-select
step s1-ddl-add-column: ALTER TABLE update_hash ADD new_column int DEFAULT 0;
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-ddl-drop-column: ALTER TABLE update_hash DROP new_column;
step s2-update: UPDATE update_hash SET data = 'l' WHERE id = 4; <waiting ...>
step s1-commit: COMMIT;
step s2-update: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              

starting permutation: s1-begin s2-begin s1-ddl-unique-constraint s2-update s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-ddl-unique-constraint: ALTER TABLE update_hash ADD CONSTRAINT update_hash_unique UNIQUE(id);
step s2-update: UPDATE update_hash SET data = 'l' WHERE id = 4; <waiting ...>
step s1-commit: COMMIT;
step s2-update: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              

starting permutation: s1-begin s2-begin s1-table-size s2-update s1-commit s2-commit s1-select
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-table-size: SELECT citus_table_size('update_hash'); SELECT citus_relation_size('update_hash'); SELECT citus_total_relation_size('update_hash');
citus_table_size

303104         
citus_relation_size

40960          
citus_total_relation_size

303104         
step s2-update: UPDATE update_hash SET data = 'l' WHERE id = 4;
step s1-commit: COMMIT;
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              

starting permutation: s1-drop s1-create-non-distributed-table s1-begin s2-begin s1-distribute-table s2-update s1-commit s2-commit s1-select
step s1-drop: DROP TABLE update_hash;
step s1-create-non-distributed-table: CREATE TABLE update_hash(id integer, data text); COPY update_hash FROM PROGRAM 'echo 0, a\\n1, b\\n2, c\\n3, d\\n4, e' WITH CSV;
step s1-begin: BEGIN;
step s2-begin: BEGIN;
step s1-distribute-table: SELECT create_distributed_table('update_hash', 'id');
create_distributed_table

               
step s2-update: UPDATE update_hash SET data = 'l' WHERE id = 4; <waiting ...>
step s1-commit: COMMIT;
step s2-update: <... completed>
step s2-commit: COMMIT;
step s1-select: SELECT * FROM update_hash ORDER BY id, data;
id             data           

0               a             
1               b             
2               c             
3               d             
4              l              
